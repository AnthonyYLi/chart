package be.ceau.chart.options.scales;

import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

import be.ceau.chart.color.Color;
import be.ceau.chart.data.JavaScriptFunction;

/**
 * The grid line configuration is nested under the scale configuration in the
 * ticks key. It defines options for the tick marks that are generated by the
 * axis.
 */
@JsonInclude(Include.NON_EMPTY)
@JsonAutoDetect(fieldVisibility = Visibility.ANY, getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE)
public class Ticks {

	/**
	 * Default {@code true}
	 * 
	 * @see #setAutoSkip(Boolean autoSkip)
	 */
	private Boolean autoSkip;

	/**
	 * Default {@code function(value) { return helpers.isArray(value) ? value : '' + value; }}
	 * 
	 * @see #setCallback(JavaScriptFunction callback)
	 */
	private JavaScriptFunction callback;

	/**
	 * Default {@code true}
	 * 
	 * @see #setDisplay(Boolean display)
	 */
	private Boolean display;

	/**
	 * Default {@code "#666"}
	 * 
	 * @see #setFontColor(Color fontColor)
	 */
	private Color fontColor;

	/**
	 * Default {@code "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif"}
	 * 
	 * @see #setFontFamily(String fontFamily)
	 */
	private String fontFamily;

	/**
	 * Default {@code 12}
	 * 
	 * @see #setFontSize(BigDecimal fontSize)
	 */
	private BigDecimal fontSize;

	/**
	 * Default {@code "normal"}
	 * 
	 * @see #setFontStyle(String fontStyle)
	 */
	private String fontStyle;

	/**
	 * Default {@code 0}
	 * 
	 * @see #setLabelOffset(BigDecimal labelOffset)
	 */
	private BigDecimal labelOffset;

	/**
	 * Default {@code 90}
	 * 
	 * @see #setMaxRotation(BigDecimal maxRotation)
	 */
	private BigDecimal maxRotation;

	/**
	 * Default {@code 0}
	 * 
	 * @see #setMinRotation(BigDecimal minRotation)
	 */
	private BigDecimal minRotation;

	/**
	 * Default {@code false}
	 * 
	 * @see #setMirror(Boolean mirror)
	 */
	private Boolean mirror;

	/**
	 * Default {@code 10}
	 * 
	 * @see #setPadding(BigDecimal padding)
	 */
	private BigDecimal padding;

	/**
	 * Default {@code false}
	 * 
	 * @see #setReverse(Boolean reverse)
	 */
	private Boolean reverse;

	/**
	 * @see #setAutoSkip(Boolean autoSkip)
	 */
	public Boolean getAutoSkip() {
	    return this.autoSkip;
	}

	/**
	 * If true, automatically calculates how many labels that can be shown and hides labels accordingly. Turn it off to show all labels no matter what
	 */
	public void setAutoSkip(Boolean autoSkip) {
	    this.autoSkip = autoSkip;
	}

	/**
	 * @see #setCallback(JavaScriptFunction callback)
	 */
	public JavaScriptFunction getCallback() {
	    return this.callback;
	}

	/**
	 * Returns the string representation of the tick value as it should be displayed on the chart. See callback section below.
	 */
	public void setCallback(JavaScriptFunction callback) {
	    this.callback = callback;
	}

	/**
	 * @see #setDisplay(Boolean display)
	 */
	public Boolean getDisplay() {
	    return this.display;
	}

	/**
	 * If true, show the ticks.
	 */
	public void setDisplay(Boolean display) {
	    this.display = display;
	}

	/**
	 * @see #setFontColor(Color fontColor)
	 */
	public Color getFontColor() {
	    return this.fontColor;
	}

	/**
	 * Font color for the tick labels.
	 */
	public void setFontColor(Color fontColor) {
	    this.fontColor = fontColor;
	}

	/**
	 * @see #setFontFamily(String fontFamily)
	 */
	public String getFontFamily() {
	    return this.fontFamily;
	}

	/**
	 * Font family for the tick labels, follows CSS font-family options.
	 */
	public void setFontFamily(String fontFamily) {
	    this.fontFamily = fontFamily;
	}

	/**
	 * @see #setFontSize(BigDecimal fontSize)
	 */
	public BigDecimal getFontSize() {
	    return this.fontSize;
	}

	/**
	 * Font size for the tick labels.
	 */
	public void setFontSize(BigDecimal fontSize) {
	    this.fontSize = fontSize;
	}

	/**
	 * @see #setFontStyle(String fontStyle)
	 */
	public String getFontStyle() {
	    return this.fontStyle;
	}

	/**
	 * Font style for the tick labels, follows CSS font-style options (i.e. normal, italic, oblique, initial, inherit).
	 */
	public void setFontStyle(String fontStyle) {
	    this.fontStyle = fontStyle;
	}

	/**
	 * @see #setLabelOffset(BigDecimal labelOffset)
	 */
	public BigDecimal getLabelOffset() {
	    return this.labelOffset;
	}

	/**
	 * Distance in pixels to offset the label from the centre point of the tick (in the y direction for the x axis, and the x direction for the y axis). Note: this can cause labels at the edges to be cropped by the edge of the canvas
	 */
	public void setLabelOffset(BigDecimal labelOffset) {
	    this.labelOffset = labelOffset;
	}

	/**
	 * @see #setMaxRotation(BigDecimal maxRotation)
	 */
	public BigDecimal getMaxRotation() {
	    return this.maxRotation;
	}

	/**
	 * Maximum rotation for tick labels when rotating to condense labels. Note: Rotation doesn't occur until necessary. Note: Only applicable to horizontal scales.
	 */
	public void setMaxRotation(BigDecimal maxRotation) {
	    this.maxRotation = maxRotation;
	}

	/**
	 * @see #setMinRotation(BigDecimal minRotation)
	 */
	public BigDecimal getMinRotation() {
	    return this.minRotation;
	}

	/**
	 * Minimum rotation for tick labels. Note: Only applicable to horizontal scales.
	 */
	public void setMinRotation(BigDecimal minRotation) {
	    this.minRotation = minRotation;
	}

	/**
	 * @see #setMirror(Boolean mirror)
	 */
	public Boolean getMirror() {
	    return this.mirror;
	}

	/**
	 * Flips tick labels around axis, displaying the labels inside the chart instead of outside. Note: Only applicable to vertical scales.
	 */
	public void setMirror(Boolean mirror) {
	    this.mirror = mirror;
	}

	/**
	 * @see #setPadding(BigDecimal padding)
	 */
	public BigDecimal getPadding() {
	    return this.padding;
	}

	/**
	 * Padding between the tick label and the axis. Note: Only applicable to horizontal scales.
	 */
	public void setPadding(BigDecimal padding) {
	    this.padding = padding;
	}

	/**
	 * @see #setReverse(Boolean reverse)
	 */
	public Boolean getReverse() {
	    return this.reverse;
	}

	/**
	 * Reverses order of tick labels.
	 */
	public void setReverse(Boolean reverse) {
	    this.reverse = reverse;
	}


}